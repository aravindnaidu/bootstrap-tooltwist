apply plugin:'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.jfrog.artifactory-upload'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
  }
}

group = PROJECT_GROUP
version = PROJECT_VERSION
sourceCompatibility = PROJECT_SOURCE_COMPATIBILITY

manifest {
  attributes 'provider': 'gradle'
}
configurations {
  provided
  published
}
sourceSets {
  main.compileClasspath += configurations.provided
  test.compileClasspath += configurations.provided
  test.runtimeClasspath += configurations.provided
}
dependencies {
  /* ToolTwist Dependencies */
  compile 'com.tooltwist:ttWbd:8.3.3-SNAPSHOT'
  compile 'com.tooltwist:ttStd:8.3.2'
  compile 'com.tooltwist:ttsec-standaloneDesigner:8.3.2'

  /* Project Dependencies */

  provided 'javax:javaee-api:6.0'

  testCompile group: 'junit', name: 'junit', version: '4.8.2'
}
task sourceJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}
artifactoryPublish {
  dependsOn sourceJar
}
artifacts {
  published sourceJar
}

artifactory {
  contextUrl = "${RESOLVE_CONTEXTURL}"
  publish {
    repository {
      repoKey = "${PUBLISH_SNAPSHOT_REPO}"
      username = "${ARTIFACTORY_USER}"
      password = "${ARTIFACTORY_PASSWORD}"
      ivy {
        ivyLayout = '[organization]/[module]/ivy-[revision].xml'
        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
        mavenCompatible = true
      }
    }
    defaults {
      publishConfigs('archives', 'published')
      properties = ['build.status': "$it.project.status".toString()]
    }
  }
  resolve {
    repository {
      repoKey = "${RESOLVE_REPO}"
      username = "${ARTIFACTORY_USER}"
      password = "${ARTIFACTORY_PASSWORD}"
      maven = true
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.12'
}

/**************************************************************************************************
 *
 *      Copy various resources into the jar file or into separate zip files.
 */

task copyWebContent(type: Copy) {
  from('WebContent')
  into 'build/classes/main/META-INF/resources'
}
task copyConfig(type: Copy) {
  from('config')
  into 'build/classes/main/META-INF/tooltwist/config'
}
task copyWidgets(type: Copy) {
  from('widgets')
  into 'build/classes/main/META-INF/tooltwist/widgets'
}
task configZip(type: Zip) {
  from 'config'
  classifier = "tooltwist-config"
}
task widgetsZip(type: Zip) {
  from 'widgets'
  classifier = "tooltwist-widgets"
}
task webcontentZip(type: Zip) {
  from 'WebContent'
  classifier = "tooltwist-webcontent"
}
processResources {
  // Create zip files for config, widget and WebContent.
  if (file('config').isDirectory()) {
    processResources.dependsOn("configZip")
    project.artifacts { archives configZip }
  }
  if (file('widgets').isDirectory()) {
    processResources.dependsOn("widgetsZip")
    project.artifacts { archives widgetsZip }
  }
  if (file('WebContent').isDirectory()) {
    processResources.dependsOn("webcontentZip")
    project.artifacts { archives webcontentZip }
  }
}
